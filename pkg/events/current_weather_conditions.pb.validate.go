// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: current_weather_conditions.proto

package weather_collector_events

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Coordinates with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Coordinates) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Coordinates with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CoordinatesMultiError, or
// nil if none found.
func (m *Coordinates) ValidateAll() error {
	return m.validate(true)
}

func (m *Coordinates) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Lat

	// no validation rules for Long

	if len(errors) > 0 {
		return CoordinatesMultiError(errors)
	}

	return nil
}

// CoordinatesMultiError is an error wrapping multiple validation errors
// returned by Coordinates.ValidateAll() if the designated constraints aren't met.
type CoordinatesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CoordinatesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CoordinatesMultiError) AllErrors() []error { return m }

// CoordinatesValidationError is the validation error returned by
// Coordinates.Validate if the designated constraints aren't met.
type CoordinatesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CoordinatesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CoordinatesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CoordinatesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CoordinatesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CoordinatesValidationError) ErrorName() string { return "CoordinatesValidationError" }

// Error satisfies the builtin error interface
func (e CoordinatesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCoordinates.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CoordinatesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CoordinatesValidationError{}

// Validate checks the field values on City with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *City) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on City with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in CityMultiError, or nil if none found.
func (m *City) ValidateAll() error {
	return m.validate(true)
}

func (m *City) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if all {
		switch v := interface{}(m.GetCoordinates()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CityValidationError{
					field:  "Coordinates",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CityValidationError{
					field:  "Coordinates",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCoordinates()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CityValidationError{
				field:  "Coordinates",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CityMultiError(errors)
	}

	return nil
}

// CityMultiError is an error wrapping multiple validation errors returned by
// City.ValidateAll() if the designated constraints aren't met.
type CityMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CityMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CityMultiError) AllErrors() []error { return m }

// CityValidationError is the validation error returned by City.Validate if the
// designated constraints aren't met.
type CityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CityValidationError) ErrorName() string { return "CityValidationError" }

// Error satisfies the builtin error interface
func (e CityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCity.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CityValidationError{}

// Validate checks the field values on CityWeatherCondition with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CityWeatherCondition) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CityWeatherCondition with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CityWeatherConditionMultiError, or nil if none found.
func (m *CityWeatherCondition) ValidateAll() error {
	return m.validate(true)
}

func (m *CityWeatherCondition) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCity()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CityWeatherConditionValidationError{
					field:  "City",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CityWeatherConditionValidationError{
					field:  "City",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CityWeatherConditionValidationError{
				field:  "City",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCapturedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CityWeatherConditionValidationError{
					field:  "CapturedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CityWeatherConditionValidationError{
					field:  "CapturedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCapturedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CityWeatherConditionValidationError{
				field:  "CapturedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Temperature

	// no validation rules for RelativeHumidityPercent

	// no validation rules for WindSpeed

	// no validation rules for WeatherCode

	// no validation rules for CloudCoverPercent

	// no validation rules for PrecipitationMillimeters

	// no validation rules for VisibilityMillimeters

	if len(errors) > 0 {
		return CityWeatherConditionMultiError(errors)
	}

	return nil
}

// CityWeatherConditionMultiError is an error wrapping multiple validation
// errors returned by CityWeatherCondition.ValidateAll() if the designated
// constraints aren't met.
type CityWeatherConditionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CityWeatherConditionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CityWeatherConditionMultiError) AllErrors() []error { return m }

// CityWeatherConditionValidationError is the validation error returned by
// CityWeatherCondition.Validate if the designated constraints aren't met.
type CityWeatherConditionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CityWeatherConditionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CityWeatherConditionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CityWeatherConditionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CityWeatherConditionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CityWeatherConditionValidationError) ErrorName() string {
	return "CityWeatherConditionValidationError"
}

// Error satisfies the builtin error interface
func (e CityWeatherConditionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCityWeatherCondition.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CityWeatherConditionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CityWeatherConditionValidationError{}

// Validate checks the field values on CityWeatherConditions with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CityWeatherConditions) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CityWeatherConditions with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CityWeatherConditionsMultiError, or nil if none found.
func (m *CityWeatherConditions) ValidateAll() error {
	return m.validate(true)
}

func (m *CityWeatherConditions) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetConditions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CityWeatherConditionsValidationError{
						field:  fmt.Sprintf("Conditions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CityWeatherConditionsValidationError{
						field:  fmt.Sprintf("Conditions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CityWeatherConditionsValidationError{
					field:  fmt.Sprintf("Conditions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CityWeatherConditionsMultiError(errors)
	}

	return nil
}

// CityWeatherConditionsMultiError is an error wrapping multiple validation
// errors returned by CityWeatherConditions.ValidateAll() if the designated
// constraints aren't met.
type CityWeatherConditionsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CityWeatherConditionsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CityWeatherConditionsMultiError) AllErrors() []error { return m }

// CityWeatherConditionsValidationError is the validation error returned by
// CityWeatherConditions.Validate if the designated constraints aren't met.
type CityWeatherConditionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CityWeatherConditionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CityWeatherConditionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CityWeatherConditionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CityWeatherConditionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CityWeatherConditionsValidationError) ErrorName() string {
	return "CityWeatherConditionsValidationError"
}

// Error satisfies the builtin error interface
func (e CityWeatherConditionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCityWeatherConditions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CityWeatherConditionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CityWeatherConditionsValidationError{}
