// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.29.3
// source: current_weather_conditions.proto

package weather_collector_events

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type WeatherCode int32

const (
	WeatherCode_WEATHER_CODE_CLEAR_SKY                WeatherCode = 0
	WeatherCode_WEATHER_CODE_MAINLY_CLEAR             WeatherCode = 1
	WeatherCode_WEATHER_CODE_PARTLY_CLOUDY            WeatherCode = 2
	WeatherCode_WEATHER_CODE_OVERCAST                 WeatherCode = 3
	WeatherCode_WEATHER_CODE_FOG                      WeatherCode = 45
	WeatherCode_WEATHER_CODE_DEPOSITING_RIME_FOG      WeatherCode = 48
	WeatherCode_WEATHER_CODE_DRIZZLE_LIGHT            WeatherCode = 51
	WeatherCode_WEATHER_CODE_DRIZZLE_MODERATE         WeatherCode = 53
	WeatherCode_WEATHER_CODE_DRIZZLE_DENSE            WeatherCode = 55
	WeatherCode_WEATHER_CODE_FREEZING_DRIZZLE_LIGHT   WeatherCode = 56
	WeatherCode_WEATHER_CODE_FREEZING_DRIZZLE_DENSE   WeatherCode = 57
	WeatherCode_WEATHER_CODE_RAIN_SLIGHT              WeatherCode = 61
	WeatherCode_WEATHER_CODE_RAIN_MODERATE            WeatherCode = 63
	WeatherCode_WEATHER_CODE_RAIN_HEAVY               WeatherCode = 65
	WeatherCode_WEATHER_CODE_FREEZING_RAIN_LIGHT      WeatherCode = 66
	WeatherCode_WEATHER_CODE_FREEZING_RAIN_HEAVY      WeatherCode = 67
	WeatherCode_WEATHER_CODE_SNOW_FALL_SLIGHT         WeatherCode = 71
	WeatherCode_WEATHER_CODE_SNOW_FALL_MODERATE       WeatherCode = 73
	WeatherCode_WEATHER_CODE_SNOW_FALL_HEAVY          WeatherCode = 75
	WeatherCode_WEATHER_CODE_SNOW_GRAINS              WeatherCode = 77
	WeatherCode_WEATHER_CODE_RAIN_SHOWERS_SLIGHT      WeatherCode = 80
	WeatherCode_WEATHER_CODE_RAIN_SHOWERS_MODERATE    WeatherCode = 81
	WeatherCode_WEATHER_CODE_RAIN_SHOWERS_VIOLENT     WeatherCode = 82
	WeatherCode_WEATHER_CODE_SNOW_SHOWERS_SLIGHT      WeatherCode = 85
	WeatherCode_WEATHER_CODE_SNOW_SHOWERS_HEAVY       WeatherCode = 86
	WeatherCode_WEATHER_CODE_THUNDERSTORM_SLIGHT      WeatherCode = 95
	WeatherCode_WEATHER_CODE_THUNDERSTORM_HAIL_SLIGHT WeatherCode = 96
	WeatherCode_WEATHER_CODE_THUNDERSTORM_HAIL_HEAVY  WeatherCode = 99
)

// Enum value maps for WeatherCode.
var (
	WeatherCode_name = map[int32]string{
		0:  "WEATHER_CODE_CLEAR_SKY",
		1:  "WEATHER_CODE_MAINLY_CLEAR",
		2:  "WEATHER_CODE_PARTLY_CLOUDY",
		3:  "WEATHER_CODE_OVERCAST",
		45: "WEATHER_CODE_FOG",
		48: "WEATHER_CODE_DEPOSITING_RIME_FOG",
		51: "WEATHER_CODE_DRIZZLE_LIGHT",
		53: "WEATHER_CODE_DRIZZLE_MODERATE",
		55: "WEATHER_CODE_DRIZZLE_DENSE",
		56: "WEATHER_CODE_FREEZING_DRIZZLE_LIGHT",
		57: "WEATHER_CODE_FREEZING_DRIZZLE_DENSE",
		61: "WEATHER_CODE_RAIN_SLIGHT",
		63: "WEATHER_CODE_RAIN_MODERATE",
		65: "WEATHER_CODE_RAIN_HEAVY",
		66: "WEATHER_CODE_FREEZING_RAIN_LIGHT",
		67: "WEATHER_CODE_FREEZING_RAIN_HEAVY",
		71: "WEATHER_CODE_SNOW_FALL_SLIGHT",
		73: "WEATHER_CODE_SNOW_FALL_MODERATE",
		75: "WEATHER_CODE_SNOW_FALL_HEAVY",
		77: "WEATHER_CODE_SNOW_GRAINS",
		80: "WEATHER_CODE_RAIN_SHOWERS_SLIGHT",
		81: "WEATHER_CODE_RAIN_SHOWERS_MODERATE",
		82: "WEATHER_CODE_RAIN_SHOWERS_VIOLENT",
		85: "WEATHER_CODE_SNOW_SHOWERS_SLIGHT",
		86: "WEATHER_CODE_SNOW_SHOWERS_HEAVY",
		95: "WEATHER_CODE_THUNDERSTORM_SLIGHT",
		96: "WEATHER_CODE_THUNDERSTORM_HAIL_SLIGHT",
		99: "WEATHER_CODE_THUNDERSTORM_HAIL_HEAVY",
	}
	WeatherCode_value = map[string]int32{
		"WEATHER_CODE_CLEAR_SKY":                0,
		"WEATHER_CODE_MAINLY_CLEAR":             1,
		"WEATHER_CODE_PARTLY_CLOUDY":            2,
		"WEATHER_CODE_OVERCAST":                 3,
		"WEATHER_CODE_FOG":                      45,
		"WEATHER_CODE_DEPOSITING_RIME_FOG":      48,
		"WEATHER_CODE_DRIZZLE_LIGHT":            51,
		"WEATHER_CODE_DRIZZLE_MODERATE":         53,
		"WEATHER_CODE_DRIZZLE_DENSE":            55,
		"WEATHER_CODE_FREEZING_DRIZZLE_LIGHT":   56,
		"WEATHER_CODE_FREEZING_DRIZZLE_DENSE":   57,
		"WEATHER_CODE_RAIN_SLIGHT":              61,
		"WEATHER_CODE_RAIN_MODERATE":            63,
		"WEATHER_CODE_RAIN_HEAVY":               65,
		"WEATHER_CODE_FREEZING_RAIN_LIGHT":      66,
		"WEATHER_CODE_FREEZING_RAIN_HEAVY":      67,
		"WEATHER_CODE_SNOW_FALL_SLIGHT":         71,
		"WEATHER_CODE_SNOW_FALL_MODERATE":       73,
		"WEATHER_CODE_SNOW_FALL_HEAVY":          75,
		"WEATHER_CODE_SNOW_GRAINS":              77,
		"WEATHER_CODE_RAIN_SHOWERS_SLIGHT":      80,
		"WEATHER_CODE_RAIN_SHOWERS_MODERATE":    81,
		"WEATHER_CODE_RAIN_SHOWERS_VIOLENT":     82,
		"WEATHER_CODE_SNOW_SHOWERS_SLIGHT":      85,
		"WEATHER_CODE_SNOW_SHOWERS_HEAVY":       86,
		"WEATHER_CODE_THUNDERSTORM_SLIGHT":      95,
		"WEATHER_CODE_THUNDERSTORM_HAIL_SLIGHT": 96,
		"WEATHER_CODE_THUNDERSTORM_HAIL_HEAVY":  99,
	}
)

func (x WeatherCode) Enum() *WeatherCode {
	p := new(WeatherCode)
	*p = x
	return p
}

func (x WeatherCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WeatherCode) Descriptor() protoreflect.EnumDescriptor {
	return file_current_weather_conditions_proto_enumTypes[0].Descriptor()
}

func (WeatherCode) Type() protoreflect.EnumType {
	return &file_current_weather_conditions_proto_enumTypes[0]
}

func (x WeatherCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WeatherCode.Descriptor instead.
func (WeatherCode) EnumDescriptor() ([]byte, []int) {
	return file_current_weather_conditions_proto_rawDescGZIP(), []int{0}
}

type Coordinates struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lat  float64 `protobuf:"fixed64,1,opt,name=lat,proto3" json:"lat,omitempty"`
	Long float64 `protobuf:"fixed64,2,opt,name=long,proto3" json:"long,omitempty"`
}

func (x *Coordinates) Reset() {
	*x = Coordinates{}
	if protoimpl.UnsafeEnabled {
		mi := &file_current_weather_conditions_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Coordinates) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Coordinates) ProtoMessage() {}

func (x *Coordinates) ProtoReflect() protoreflect.Message {
	mi := &file_current_weather_conditions_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Coordinates.ProtoReflect.Descriptor instead.
func (*Coordinates) Descriptor() ([]byte, []int) {
	return file_current_weather_conditions_proto_rawDescGZIP(), []int{0}
}

func (x *Coordinates) GetLat() float64 {
	if x != nil {
		return x.Lat
	}
	return 0
}

func (x *Coordinates) GetLong() float64 {
	if x != nil {
		return x.Long
	}
	return 0
}

type City struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string       `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Coordinates *Coordinates `protobuf:"bytes,2,opt,name=coordinates,proto3" json:"coordinates,omitempty"`
}

func (x *City) Reset() {
	*x = City{}
	if protoimpl.UnsafeEnabled {
		mi := &file_current_weather_conditions_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *City) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*City) ProtoMessage() {}

func (x *City) ProtoReflect() protoreflect.Message {
	mi := &file_current_weather_conditions_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use City.ProtoReflect.Descriptor instead.
func (*City) Descriptor() ([]byte, []int) {
	return file_current_weather_conditions_proto_rawDescGZIP(), []int{1}
}

func (x *City) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *City) GetCoordinates() *Coordinates {
	if x != nil {
		return x.Coordinates
	}
	return nil
}

type CityWeatherCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	City                     *City                  `protobuf:"bytes,1,opt,name=city,proto3" json:"city,omitempty"`
	CapturedAt               *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=captured_at,json=capturedAt,proto3" json:"captured_at,omitempty"`
	Temperature              float64                `protobuf:"fixed64,3,opt,name=temperature,proto3" json:"temperature,omitempty"`
	RelativeHumidityPercent  uint32                 `protobuf:"varint,4,opt,name=relative_humidity_percent,json=relativeHumidityPercent,proto3" json:"relative_humidity_percent,omitempty"`
	WindSpeed                float64                `protobuf:"fixed64,5,opt,name=wind_speed,json=windSpeed,proto3" json:"wind_speed,omitempty"`
	WeatherCode              WeatherCode            `protobuf:"varint,6,opt,name=weather_code,json=weatherCode,proto3,enum=weather_collector_events.WeatherCode" json:"weather_code,omitempty"`
	CloudCoverPercent        uint32                 `protobuf:"varint,7,opt,name=cloud_cover_percent,json=cloudCoverPercent,proto3" json:"cloud_cover_percent,omitempty"`
	PrecipitationMillimeters int64                  `protobuf:"varint,8,opt,name=precipitation_millimeters,json=precipitationMillimeters,proto3" json:"precipitation_millimeters,omitempty"`
	VisibilityMillimeters    int64                  `protobuf:"varint,9,opt,name=visibility_millimeters,json=visibilityMillimeters,proto3" json:"visibility_millimeters,omitempty"`
}

func (x *CityWeatherCondition) Reset() {
	*x = CityWeatherCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_current_weather_conditions_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CityWeatherCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CityWeatherCondition) ProtoMessage() {}

func (x *CityWeatherCondition) ProtoReflect() protoreflect.Message {
	mi := &file_current_weather_conditions_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CityWeatherCondition.ProtoReflect.Descriptor instead.
func (*CityWeatherCondition) Descriptor() ([]byte, []int) {
	return file_current_weather_conditions_proto_rawDescGZIP(), []int{2}
}

func (x *CityWeatherCondition) GetCity() *City {
	if x != nil {
		return x.City
	}
	return nil
}

func (x *CityWeatherCondition) GetCapturedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CapturedAt
	}
	return nil
}

func (x *CityWeatherCondition) GetTemperature() float64 {
	if x != nil {
		return x.Temperature
	}
	return 0
}

func (x *CityWeatherCondition) GetRelativeHumidityPercent() uint32 {
	if x != nil {
		return x.RelativeHumidityPercent
	}
	return 0
}

func (x *CityWeatherCondition) GetWindSpeed() float64 {
	if x != nil {
		return x.WindSpeed
	}
	return 0
}

func (x *CityWeatherCondition) GetWeatherCode() WeatherCode {
	if x != nil {
		return x.WeatherCode
	}
	return WeatherCode_WEATHER_CODE_CLEAR_SKY
}

func (x *CityWeatherCondition) GetCloudCoverPercent() uint32 {
	if x != nil {
		return x.CloudCoverPercent
	}
	return 0
}

func (x *CityWeatherCondition) GetPrecipitationMillimeters() int64 {
	if x != nil {
		return x.PrecipitationMillimeters
	}
	return 0
}

func (x *CityWeatherCondition) GetVisibilityMillimeters() int64 {
	if x != nil {
		return x.VisibilityMillimeters
	}
	return 0
}

type CityWeatherConditions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conditions []*CityWeatherCondition `protobuf:"bytes,1,rep,name=conditions,proto3" json:"conditions,omitempty"`
}

func (x *CityWeatherConditions) Reset() {
	*x = CityWeatherConditions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_current_weather_conditions_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CityWeatherConditions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CityWeatherConditions) ProtoMessage() {}

func (x *CityWeatherConditions) ProtoReflect() protoreflect.Message {
	mi := &file_current_weather_conditions_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CityWeatherConditions.ProtoReflect.Descriptor instead.
func (*CityWeatherConditions) Descriptor() ([]byte, []int) {
	return file_current_weather_conditions_proto_rawDescGZIP(), []int{3}
}

func (x *CityWeatherConditions) GetConditions() []*CityWeatherCondition {
	if x != nil {
		return x.Conditions
	}
	return nil
}

var File_current_weather_conditions_proto protoreflect.FileDescriptor

var file_current_weather_conditions_proto_rawDesc = []byte{
	0x0a, 0x20, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65,
	0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x18, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x33, 0x0a,
	0x0b, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73, 0x12, 0x10, 0x0a, 0x03,
	0x6c, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6c, 0x61, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x6c, 0x6f, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x6c, 0x6f,
	0x6e, 0x67, 0x22, 0x63, 0x0a, 0x04, 0x43, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x47,
	0x0a, 0x0b, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x43,
	0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73, 0x52, 0x0b, 0x63, 0x6f, 0x6f, 0x72,
	0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73, 0x22, 0xf2, 0x03, 0x0a, 0x14, 0x43, 0x69, 0x74, 0x79,
	0x57, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x32, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x52, 0x04,
	0x63, 0x69, 0x74, 0x79, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x12, 0x3a, 0x0a, 0x19, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f,
	0x68, 0x75, 0x6d, 0x69, 0x64, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x48, 0x75, 0x6d, 0x69, 0x64, 0x69, 0x74, 0x79, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x77, 0x69, 0x6e, 0x64, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x09, 0x77, 0x69, 0x6e, 0x64, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x48,
	0x0a, 0x0c, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e,
	0x57, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0b, 0x77, 0x65, 0x61,
	0x74, 0x68, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x5f, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6f, 0x76, 0x65,
	0x72, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x3b, 0x0a, 0x19, 0x70, 0x72, 0x65, 0x63,
	0x69, 0x70, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x18, 0x70, 0x72, 0x65,
	0x63, 0x69, 0x70, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x35, 0x0a, 0x16, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x5f, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x22, 0x67, 0x0a, 0x15,
	0x43, 0x69, 0x74, 0x79, 0x57, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x77, 0x65, 0x61, 0x74,
	0x68, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x57, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2a, 0xde, 0x07, 0x0a, 0x0b, 0x57, 0x65, 0x61, 0x74, 0x68, 0x65,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x57, 0x45, 0x41, 0x54, 0x48, 0x45, 0x52,
	0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x4c, 0x45, 0x41, 0x52, 0x5f, 0x53, 0x4b, 0x59, 0x10,
	0x00, 0x12, 0x1d, 0x0a, 0x19, 0x57, 0x45, 0x41, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x4c, 0x59, 0x5f, 0x43, 0x4c, 0x45, 0x41, 0x52, 0x10, 0x01,
	0x12, 0x1e, 0x0a, 0x1a, 0x57, 0x45, 0x41, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x44, 0x45,
	0x5f, 0x50, 0x41, 0x52, 0x54, 0x4c, 0x59, 0x5f, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x59, 0x10, 0x02,
	0x12, 0x19, 0x0a, 0x15, 0x57, 0x45, 0x41, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x44, 0x45,
	0x5f, 0x4f, 0x56, 0x45, 0x52, 0x43, 0x41, 0x53, 0x54, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x57,
	0x45, 0x41, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x46, 0x4f, 0x47, 0x10,
	0x2d, 0x12, 0x24, 0x0a, 0x20, 0x57, 0x45, 0x41, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x44, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x52, 0x49, 0x4d,
	0x45, 0x5f, 0x46, 0x4f, 0x47, 0x10, 0x30, 0x12, 0x1e, 0x0a, 0x1a, 0x57, 0x45, 0x41, 0x54, 0x48,
	0x45, 0x52, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x44, 0x52, 0x49, 0x5a, 0x5a, 0x4c, 0x45, 0x5f,
	0x4c, 0x49, 0x47, 0x48, 0x54, 0x10, 0x33, 0x12, 0x21, 0x0a, 0x1d, 0x57, 0x45, 0x41, 0x54, 0x48,
	0x45, 0x52, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x44, 0x52, 0x49, 0x5a, 0x5a, 0x4c, 0x45, 0x5f,
	0x4d, 0x4f, 0x44, 0x45, 0x52, 0x41, 0x54, 0x45, 0x10, 0x35, 0x12, 0x1e, 0x0a, 0x1a, 0x57, 0x45,
	0x41, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x44, 0x52, 0x49, 0x5a, 0x5a,
	0x4c, 0x45, 0x5f, 0x44, 0x45, 0x4e, 0x53, 0x45, 0x10, 0x37, 0x12, 0x27, 0x0a, 0x23, 0x57, 0x45,
	0x41, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x46, 0x52, 0x45, 0x45, 0x5a,
	0x49, 0x4e, 0x47, 0x5f, 0x44, 0x52, 0x49, 0x5a, 0x5a, 0x4c, 0x45, 0x5f, 0x4c, 0x49, 0x47, 0x48,
	0x54, 0x10, 0x38, 0x12, 0x27, 0x0a, 0x23, 0x57, 0x45, 0x41, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x43,
	0x4f, 0x44, 0x45, 0x5f, 0x46, 0x52, 0x45, 0x45, 0x5a, 0x49, 0x4e, 0x47, 0x5f, 0x44, 0x52, 0x49,
	0x5a, 0x5a, 0x4c, 0x45, 0x5f, 0x44, 0x45, 0x4e, 0x53, 0x45, 0x10, 0x39, 0x12, 0x1c, 0x0a, 0x18,
	0x57, 0x45, 0x41, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x52, 0x41, 0x49,
	0x4e, 0x5f, 0x53, 0x4c, 0x49, 0x47, 0x48, 0x54, 0x10, 0x3d, 0x12, 0x1e, 0x0a, 0x1a, 0x57, 0x45,
	0x41, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x52, 0x41, 0x49, 0x4e, 0x5f,
	0x4d, 0x4f, 0x44, 0x45, 0x52, 0x41, 0x54, 0x45, 0x10, 0x3f, 0x12, 0x1b, 0x0a, 0x17, 0x57, 0x45,
	0x41, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x52, 0x41, 0x49, 0x4e, 0x5f,
	0x48, 0x45, 0x41, 0x56, 0x59, 0x10, 0x41, 0x12, 0x24, 0x0a, 0x20, 0x57, 0x45, 0x41, 0x54, 0x48,
	0x45, 0x52, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x46, 0x52, 0x45, 0x45, 0x5a, 0x49, 0x4e, 0x47,
	0x5f, 0x52, 0x41, 0x49, 0x4e, 0x5f, 0x4c, 0x49, 0x47, 0x48, 0x54, 0x10, 0x42, 0x12, 0x24, 0x0a,
	0x20, 0x57, 0x45, 0x41, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x46, 0x52,
	0x45, 0x45, 0x5a, 0x49, 0x4e, 0x47, 0x5f, 0x52, 0x41, 0x49, 0x4e, 0x5f, 0x48, 0x45, 0x41, 0x56,
	0x59, 0x10, 0x43, 0x12, 0x21, 0x0a, 0x1d, 0x57, 0x45, 0x41, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x43,
	0x4f, 0x44, 0x45, 0x5f, 0x53, 0x4e, 0x4f, 0x57, 0x5f, 0x46, 0x41, 0x4c, 0x4c, 0x5f, 0x53, 0x4c,
	0x49, 0x47, 0x48, 0x54, 0x10, 0x47, 0x12, 0x23, 0x0a, 0x1f, 0x57, 0x45, 0x41, 0x54, 0x48, 0x45,
	0x52, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x4e, 0x4f, 0x57, 0x5f, 0x46, 0x41, 0x4c, 0x4c,
	0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x52, 0x41, 0x54, 0x45, 0x10, 0x49, 0x12, 0x20, 0x0a, 0x1c, 0x57,
	0x45, 0x41, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x4e, 0x4f, 0x57,
	0x5f, 0x46, 0x41, 0x4c, 0x4c, 0x5f, 0x48, 0x45, 0x41, 0x56, 0x59, 0x10, 0x4b, 0x12, 0x1c, 0x0a,
	0x18, 0x57, 0x45, 0x41, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x4e,
	0x4f, 0x57, 0x5f, 0x47, 0x52, 0x41, 0x49, 0x4e, 0x53, 0x10, 0x4d, 0x12, 0x24, 0x0a, 0x20, 0x57,
	0x45, 0x41, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x52, 0x41, 0x49, 0x4e,
	0x5f, 0x53, 0x48, 0x4f, 0x57, 0x45, 0x52, 0x53, 0x5f, 0x53, 0x4c, 0x49, 0x47, 0x48, 0x54, 0x10,
	0x50, 0x12, 0x26, 0x0a, 0x22, 0x57, 0x45, 0x41, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x52, 0x41, 0x49, 0x4e, 0x5f, 0x53, 0x48, 0x4f, 0x57, 0x45, 0x52, 0x53, 0x5f, 0x4d,
	0x4f, 0x44, 0x45, 0x52, 0x41, 0x54, 0x45, 0x10, 0x51, 0x12, 0x25, 0x0a, 0x21, 0x57, 0x45, 0x41,
	0x54, 0x48, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x52, 0x41, 0x49, 0x4e, 0x5f, 0x53,
	0x48, 0x4f, 0x57, 0x45, 0x52, 0x53, 0x5f, 0x56, 0x49, 0x4f, 0x4c, 0x45, 0x4e, 0x54, 0x10, 0x52,
	0x12, 0x24, 0x0a, 0x20, 0x57, 0x45, 0x41, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x44, 0x45,
	0x5f, 0x53, 0x4e, 0x4f, 0x57, 0x5f, 0x53, 0x48, 0x4f, 0x57, 0x45, 0x52, 0x53, 0x5f, 0x53, 0x4c,
	0x49, 0x47, 0x48, 0x54, 0x10, 0x55, 0x12, 0x23, 0x0a, 0x1f, 0x57, 0x45, 0x41, 0x54, 0x48, 0x45,
	0x52, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x4e, 0x4f, 0x57, 0x5f, 0x53, 0x48, 0x4f, 0x57,
	0x45, 0x52, 0x53, 0x5f, 0x48, 0x45, 0x41, 0x56, 0x59, 0x10, 0x56, 0x12, 0x24, 0x0a, 0x20, 0x57,
	0x45, 0x41, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x54, 0x48, 0x55, 0x4e,
	0x44, 0x45, 0x52, 0x53, 0x54, 0x4f, 0x52, 0x4d, 0x5f, 0x53, 0x4c, 0x49, 0x47, 0x48, 0x54, 0x10,
	0x5f, 0x12, 0x29, 0x0a, 0x25, 0x57, 0x45, 0x41, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x54, 0x48, 0x55, 0x4e, 0x44, 0x45, 0x52, 0x53, 0x54, 0x4f, 0x52, 0x4d, 0x5f, 0x48,
	0x41, 0x49, 0x4c, 0x5f, 0x53, 0x4c, 0x49, 0x47, 0x48, 0x54, 0x10, 0x60, 0x12, 0x28, 0x0a, 0x24,
	0x57, 0x45, 0x41, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x54, 0x48, 0x55,
	0x4e, 0x44, 0x45, 0x52, 0x53, 0x54, 0x4f, 0x52, 0x4d, 0x5f, 0x48, 0x41, 0x49, 0x4c, 0x5f, 0x48,
	0x45, 0x41, 0x56, 0x59, 0x10, 0x63, 0x42, 0x2d, 0x5a, 0x2b, 0x70, 0x6b, 0x67, 0x2f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x2f, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x3b, 0x77, 0x65, 0x61,
	0x74, 0x68, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_current_weather_conditions_proto_rawDescOnce sync.Once
	file_current_weather_conditions_proto_rawDescData = file_current_weather_conditions_proto_rawDesc
)

func file_current_weather_conditions_proto_rawDescGZIP() []byte {
	file_current_weather_conditions_proto_rawDescOnce.Do(func() {
		file_current_weather_conditions_proto_rawDescData = protoimpl.X.CompressGZIP(file_current_weather_conditions_proto_rawDescData)
	})
	return file_current_weather_conditions_proto_rawDescData
}

var file_current_weather_conditions_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_current_weather_conditions_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_current_weather_conditions_proto_goTypes = []any{
	(WeatherCode)(0),              // 0: weather_collector_events.WeatherCode
	(*Coordinates)(nil),           // 1: weather_collector_events.Coordinates
	(*City)(nil),                  // 2: weather_collector_events.City
	(*CityWeatherCondition)(nil),  // 3: weather_collector_events.CityWeatherCondition
	(*CityWeatherConditions)(nil), // 4: weather_collector_events.CityWeatherConditions
	(*timestamppb.Timestamp)(nil), // 5: google.protobuf.Timestamp
}
var file_current_weather_conditions_proto_depIdxs = []int32{
	1, // 0: weather_collector_events.City.coordinates:type_name -> weather_collector_events.Coordinates
	2, // 1: weather_collector_events.CityWeatherCondition.city:type_name -> weather_collector_events.City
	5, // 2: weather_collector_events.CityWeatherCondition.captured_at:type_name -> google.protobuf.Timestamp
	0, // 3: weather_collector_events.CityWeatherCondition.weather_code:type_name -> weather_collector_events.WeatherCode
	3, // 4: weather_collector_events.CityWeatherConditions.conditions:type_name -> weather_collector_events.CityWeatherCondition
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_current_weather_conditions_proto_init() }
func file_current_weather_conditions_proto_init() {
	if File_current_weather_conditions_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_current_weather_conditions_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*Coordinates); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_current_weather_conditions_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*City); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_current_weather_conditions_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*CityWeatherCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_current_weather_conditions_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*CityWeatherConditions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_current_weather_conditions_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_current_weather_conditions_proto_goTypes,
		DependencyIndexes: file_current_weather_conditions_proto_depIdxs,
		EnumInfos:         file_current_weather_conditions_proto_enumTypes,
		MessageInfos:      file_current_weather_conditions_proto_msgTypes,
	}.Build()
	File_current_weather_conditions_proto = out.File
	file_current_weather_conditions_proto_rawDesc = nil
	file_current_weather_conditions_proto_goTypes = nil
	file_current_weather_conditions_proto_depIdxs = nil
}
