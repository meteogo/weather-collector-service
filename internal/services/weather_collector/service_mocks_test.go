// Code generated by MockGen. DO NOT EDIT.
// Source: service.go
//
// Generated by this command:
//
//	mockgen -source service.go -destination service_mocks_test.go -package weather_collector_test -typed
//

// Package weather_collector_test is a generated GoMock package.
package weather_collector_test

import (
	context "context"
	reflect "reflect"

	weather_collector "github.com/meteogo/weather-collector-service/internal/services/weather_collector"
	gomock "go.uber.org/mock/gomock"
)

// MockConfig is a mock of Config interface.
type MockConfig struct {
	ctrl     *gomock.Controller
	recorder *MockConfigMockRecorder
	isgomock struct{}
}

// MockConfigMockRecorder is the mock recorder for MockConfig.
type MockConfigMockRecorder struct {
	mock *MockConfig
}

// NewMockConfig creates a new mock instance.
func NewMockConfig(ctrl *gomock.Controller) *MockConfig {
	mock := &MockConfig{ctrl: ctrl}
	mock.recorder = &MockConfigMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfig) EXPECT() *MockConfigMockRecorder {
	return m.recorder
}

// MonitoringParams mocks base method.
func (m *MockConfig) MonitoringParams() weather_collector.MonitoringParamsMap {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MonitoringParams")
	ret0, _ := ret[0].(weather_collector.MonitoringParamsMap)
	return ret0
}

// MonitoringParams indicates an expected call of MonitoringParams.
func (mr *MockConfigMockRecorder) MonitoringParams() *MockConfigMonitoringParamsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MonitoringParams", reflect.TypeOf((*MockConfig)(nil).MonitoringParams))
	return &MockConfigMonitoringParamsCall{Call: call}
}

// MockConfigMonitoringParamsCall wrap *gomock.Call
type MockConfigMonitoringParamsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConfigMonitoringParamsCall) Return(arg0 weather_collector.MonitoringParamsMap) *MockConfigMonitoringParamsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConfigMonitoringParamsCall) Do(f func() weather_collector.MonitoringParamsMap) *MockConfigMonitoringParamsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConfigMonitoringParamsCall) DoAndReturn(f func() weather_collector.MonitoringParamsMap) *MockConfigMonitoringParamsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ReportedCities mocks base method.
func (m *MockConfig) ReportedCities() weather_collector.ReportedCities {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReportedCities")
	ret0, _ := ret[0].(weather_collector.ReportedCities)
	return ret0
}

// ReportedCities indicates an expected call of ReportedCities.
func (mr *MockConfigMockRecorder) ReportedCities() *MockConfigReportedCitiesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportedCities", reflect.TypeOf((*MockConfig)(nil).ReportedCities))
	return &MockConfigReportedCitiesCall{Call: call}
}

// MockConfigReportedCitiesCall wrap *gomock.Call
type MockConfigReportedCitiesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConfigReportedCitiesCall) Return(arg0 weather_collector.ReportedCities) *MockConfigReportedCitiesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConfigReportedCitiesCall) Do(f func() weather_collector.ReportedCities) *MockConfigReportedCitiesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConfigReportedCitiesCall) DoAndReturn(f func() weather_collector.ReportedCities) *MockConfigReportedCitiesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WorkerPoolSize mocks base method.
func (m *MockConfig) WorkerPoolSize() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkerPoolSize")
	ret0, _ := ret[0].(int)
	return ret0
}

// WorkerPoolSize indicates an expected call of WorkerPoolSize.
func (mr *MockConfigMockRecorder) WorkerPoolSize() *MockConfigWorkerPoolSizeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkerPoolSize", reflect.TypeOf((*MockConfig)(nil).WorkerPoolSize))
	return &MockConfigWorkerPoolSizeCall{Call: call}
}

// MockConfigWorkerPoolSizeCall wrap *gomock.Call
type MockConfigWorkerPoolSizeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConfigWorkerPoolSizeCall) Return(arg0 int) *MockConfigWorkerPoolSizeCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConfigWorkerPoolSizeCall) Do(f func() int) *MockConfigWorkerPoolSizeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConfigWorkerPoolSizeCall) DoAndReturn(f func() int) *MockConfigWorkerPoolSizeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockMeteoClient is a mock of MeteoClient interface.
type MockMeteoClient struct {
	ctrl     *gomock.Controller
	recorder *MockMeteoClientMockRecorder
	isgomock struct{}
}

// MockMeteoClientMockRecorder is the mock recorder for MockMeteoClient.
type MockMeteoClientMockRecorder struct {
	mock *MockMeteoClient
}

// NewMockMeteoClient creates a new mock instance.
func NewMockMeteoClient(ctrl *gomock.Controller) *MockMeteoClient {
	mock := &MockMeteoClient{ctrl: ctrl}
	mock.recorder = &MockMeteoClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMeteoClient) EXPECT() *MockMeteoClientMockRecorder {
	return m.recorder
}

// CurrentWeather mocks base method.
func (m *MockMeteoClient) CurrentWeather(ctx context.Context, coordinates weather_collector.Coordinates, params weather_collector.MonitoringParamsMap) (weather_collector.CityWeatherCondition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CurrentWeather", ctx, coordinates, params)
	ret0, _ := ret[0].(weather_collector.CityWeatherCondition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CurrentWeather indicates an expected call of CurrentWeather.
func (mr *MockMeteoClientMockRecorder) CurrentWeather(ctx, coordinates, params any) *MockMeteoClientCurrentWeatherCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CurrentWeather", reflect.TypeOf((*MockMeteoClient)(nil).CurrentWeather), ctx, coordinates, params)
	return &MockMeteoClientCurrentWeatherCall{Call: call}
}

// MockMeteoClientCurrentWeatherCall wrap *gomock.Call
type MockMeteoClientCurrentWeatherCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMeteoClientCurrentWeatherCall) Return(arg0 weather_collector.CityWeatherCondition, arg1 error) *MockMeteoClientCurrentWeatherCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMeteoClientCurrentWeatherCall) Do(f func(context.Context, weather_collector.Coordinates, weather_collector.MonitoringParamsMap) (weather_collector.CityWeatherCondition, error)) *MockMeteoClientCurrentWeatherCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMeteoClientCurrentWeatherCall) DoAndReturn(f func(context.Context, weather_collector.Coordinates, weather_collector.MonitoringParamsMap) (weather_collector.CityWeatherCondition, error)) *MockMeteoClientCurrentWeatherCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
	isgomock struct{}
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// Save mocks base method.
func (m *MockStorage) Save(ctx context.Context, conditions weather_collector.CityWeatherConditions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, conditions)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockStorageMockRecorder) Save(ctx, conditions any) *MockStorageSaveCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockStorage)(nil).Save), ctx, conditions)
	return &MockStorageSaveCall{Call: call}
}

// MockStorageSaveCall wrap *gomock.Call
type MockStorageSaveCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageSaveCall) Return(arg0 error) *MockStorageSaveCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageSaveCall) Do(f func(context.Context, weather_collector.CityWeatherConditions) error) *MockStorageSaveCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageSaveCall) DoAndReturn(f func(context.Context, weather_collector.CityWeatherConditions) error) *MockStorageSaveCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
