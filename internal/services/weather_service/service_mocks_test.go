// Code generated by MockGen. DO NOT EDIT.
// Source: service.go
//
// Generated by this command:
//
//	mockgen -source service.go -destination service_mocks_test.go -package weather_service_test -typed
//

// Package weather_service_test is a generated GoMock package.
package weather_service_test

import (
	context "context"
	reflect "reflect"
	time "time"

	weather_service "github.com/meteogo/weather-collector-service/internal/services/weather_service"
	gomock "go.uber.org/mock/gomock"
)

// MockConfig is a mock of Config interface.
type MockConfig struct {
	ctrl     *gomock.Controller
	recorder *MockConfigMockRecorder
	isgomock struct{}
}

// MockConfigMockRecorder is the mock recorder for MockConfig.
type MockConfigMockRecorder struct {
	mock *MockConfig
}

// NewMockConfig creates a new mock instance.
func NewMockConfig(ctrl *gomock.Controller) *MockConfig {
	mock := &MockConfig{ctrl: ctrl}
	mock.recorder = &MockConfigMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfig) EXPECT() *MockConfigMockRecorder {
	return m.recorder
}

// MonitoringParams mocks base method.
func (m *MockConfig) MonitoringParams() weather_service.MonitoringParamsMap {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MonitoringParams")
	ret0, _ := ret[0].(weather_service.MonitoringParamsMap)
	return ret0
}

// MonitoringParams indicates an expected call of MonitoringParams.
func (mr *MockConfigMockRecorder) MonitoringParams() *MockConfigMonitoringParamsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MonitoringParams", reflect.TypeOf((*MockConfig)(nil).MonitoringParams))
	return &MockConfigMonitoringParamsCall{Call: call}
}

// MockConfigMonitoringParamsCall wrap *gomock.Call
type MockConfigMonitoringParamsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConfigMonitoringParamsCall) Return(arg0 weather_service.MonitoringParamsMap) *MockConfigMonitoringParamsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConfigMonitoringParamsCall) Do(f func() weather_service.MonitoringParamsMap) *MockConfigMonitoringParamsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConfigMonitoringParamsCall) DoAndReturn(f func() weather_service.MonitoringParamsMap) *MockConfigMonitoringParamsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ReportedCities mocks base method.
func (m *MockConfig) ReportedCities() weather_service.ReportedCities {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReportedCities")
	ret0, _ := ret[0].(weather_service.ReportedCities)
	return ret0
}

// ReportedCities indicates an expected call of ReportedCities.
func (mr *MockConfigMockRecorder) ReportedCities() *MockConfigReportedCitiesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportedCities", reflect.TypeOf((*MockConfig)(nil).ReportedCities))
	return &MockConfigReportedCitiesCall{Call: call}
}

// MockConfigReportedCitiesCall wrap *gomock.Call
type MockConfigReportedCitiesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConfigReportedCitiesCall) Return(arg0 weather_service.ReportedCities) *MockConfigReportedCitiesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConfigReportedCitiesCall) Do(f func() weather_service.ReportedCities) *MockConfigReportedCitiesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConfigReportedCitiesCall) DoAndReturn(f func() weather_service.ReportedCities) *MockConfigReportedCitiesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WorkerPoolSize mocks base method.
func (m *MockConfig) WorkerPoolSize() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkerPoolSize")
	ret0, _ := ret[0].(int)
	return ret0
}

// WorkerPoolSize indicates an expected call of WorkerPoolSize.
func (mr *MockConfigMockRecorder) WorkerPoolSize() *MockConfigWorkerPoolSizeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkerPoolSize", reflect.TypeOf((*MockConfig)(nil).WorkerPoolSize))
	return &MockConfigWorkerPoolSizeCall{Call: call}
}

// MockConfigWorkerPoolSizeCall wrap *gomock.Call
type MockConfigWorkerPoolSizeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConfigWorkerPoolSizeCall) Return(arg0 int) *MockConfigWorkerPoolSizeCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConfigWorkerPoolSizeCall) Do(f func() int) *MockConfigWorkerPoolSizeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConfigWorkerPoolSizeCall) DoAndReturn(f func() int) *MockConfigWorkerPoolSizeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockMeteoClient is a mock of MeteoClient interface.
type MockMeteoClient struct {
	ctrl     *gomock.Controller
	recorder *MockMeteoClientMockRecorder
	isgomock struct{}
}

// MockMeteoClientMockRecorder is the mock recorder for MockMeteoClient.
type MockMeteoClientMockRecorder struct {
	mock *MockMeteoClient
}

// NewMockMeteoClient creates a new mock instance.
func NewMockMeteoClient(ctrl *gomock.Controller) *MockMeteoClient {
	mock := &MockMeteoClient{ctrl: ctrl}
	mock.recorder = &MockMeteoClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMeteoClient) EXPECT() *MockMeteoClientMockRecorder {
	return m.recorder
}

// CurrentWeather mocks base method.
func (m *MockMeteoClient) CurrentWeather(ctx context.Context, city weather_service.City, params weather_service.MonitoringParamsMap) (weather_service.CityWeatherCondition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CurrentWeather", ctx, city, params)
	ret0, _ := ret[0].(weather_service.CityWeatherCondition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CurrentWeather indicates an expected call of CurrentWeather.
func (mr *MockMeteoClientMockRecorder) CurrentWeather(ctx, city, params any) *MockMeteoClientCurrentWeatherCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CurrentWeather", reflect.TypeOf((*MockMeteoClient)(nil).CurrentWeather), ctx, city, params)
	return &MockMeteoClientCurrentWeatherCall{Call: call}
}

// MockMeteoClientCurrentWeatherCall wrap *gomock.Call
type MockMeteoClientCurrentWeatherCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMeteoClientCurrentWeatherCall) Return(arg0 weather_service.CityWeatherCondition, arg1 error) *MockMeteoClientCurrentWeatherCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMeteoClientCurrentWeatherCall) Do(f func(context.Context, weather_service.City, weather_service.MonitoringParamsMap) (weather_service.CityWeatherCondition, error)) *MockMeteoClientCurrentWeatherCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMeteoClientCurrentWeatherCall) DoAndReturn(f func(context.Context, weather_service.City, weather_service.MonitoringParamsMap) (weather_service.CityWeatherCondition, error)) *MockMeteoClientCurrentWeatherCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockPublisher is a mock of Publisher interface.
type MockPublisher struct {
	ctrl     *gomock.Controller
	recorder *MockPublisherMockRecorder
	isgomock struct{}
}

// MockPublisherMockRecorder is the mock recorder for MockPublisher.
type MockPublisherMockRecorder struct {
	mock *MockPublisher
}

// NewMockPublisher creates a new mock instance.
func NewMockPublisher(ctrl *gomock.Controller) *MockPublisher {
	mock := &MockPublisher{ctrl: ctrl}
	mock.recorder = &MockPublisherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPublisher) EXPECT() *MockPublisherMockRecorder {
	return m.recorder
}

// PublishConditions mocks base method.
func (m *MockPublisher) PublishConditions(ctx context.Context, conditions weather_service.CityWeatherConditions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishConditions", ctx, conditions)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishConditions indicates an expected call of PublishConditions.
func (mr *MockPublisherMockRecorder) PublishConditions(ctx, conditions any) *MockPublisherPublishConditionsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishConditions", reflect.TypeOf((*MockPublisher)(nil).PublishConditions), ctx, conditions)
	return &MockPublisherPublishConditionsCall{Call: call}
}

// MockPublisherPublishConditionsCall wrap *gomock.Call
type MockPublisherPublishConditionsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPublisherPublishConditionsCall) Return(arg0 error) *MockPublisherPublishConditionsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPublisherPublishConditionsCall) Do(f func(context.Context, weather_service.CityWeatherConditions) error) *MockPublisherPublishConditionsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPublisherPublishConditionsCall) DoAndReturn(f func(context.Context, weather_service.CityWeatherConditions) error) *MockPublisherPublishConditionsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
	isgomock struct{}
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// GetConditions mocks base method.
func (m *MockStorage) GetConditions(ctx context.Context) (weather_service.CityWeatherConditions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConditions", ctx)
	ret0, _ := ret[0].(weather_service.CityWeatherConditions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConditions indicates an expected call of GetConditions.
func (mr *MockStorageMockRecorder) GetConditions(ctx any) *MockStorageGetConditionsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConditions", reflect.TypeOf((*MockStorage)(nil).GetConditions), ctx)
	return &MockStorageGetConditionsCall{Call: call}
}

// MockStorageGetConditionsCall wrap *gomock.Call
type MockStorageGetConditionsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageGetConditionsCall) Return(arg0 weather_service.CityWeatherConditions, arg1 error) *MockStorageGetConditionsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageGetConditionsCall) Do(f func(context.Context) (weather_service.CityWeatherConditions, error)) *MockStorageGetConditionsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageGetConditionsCall) DoAndReturn(f func(context.Context) (weather_service.CityWeatherConditions, error)) *MockStorageGetConditionsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SaveConditions mocks base method.
func (m *MockStorage) SaveConditions(ctx context.Context, conditions weather_service.CityWeatherConditions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveConditions", ctx, conditions)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveConditions indicates an expected call of SaveConditions.
func (mr *MockStorageMockRecorder) SaveConditions(ctx, conditions any) *MockStorageSaveConditionsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveConditions", reflect.TypeOf((*MockStorage)(nil).SaveConditions), ctx, conditions)
	return &MockStorageSaveConditionsCall{Call: call}
}

// MockStorageSaveConditionsCall wrap *gomock.Call
type MockStorageSaveConditionsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageSaveConditionsCall) Return(arg0 error) *MockStorageSaveConditionsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageSaveConditionsCall) Do(f func(context.Context, weather_service.CityWeatherConditions) error) *MockStorageSaveConditionsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageSaveConditionsCall) DoAndReturn(f func(context.Context, weather_service.CityWeatherConditions) error) *MockStorageSaveConditionsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockMetricsManager is a mock of MetricsManager interface.
type MockMetricsManager struct {
	ctrl     *gomock.Controller
	recorder *MockMetricsManagerMockRecorder
	isgomock struct{}
}

// MockMetricsManagerMockRecorder is the mock recorder for MockMetricsManager.
type MockMetricsManagerMockRecorder struct {
	mock *MockMetricsManager
}

// NewMockMetricsManager creates a new mock instance.
func NewMockMetricsManager(ctrl *gomock.Controller) *MockMetricsManager {
	mock := &MockMetricsManager{ctrl: ctrl}
	mock.recorder = &MockMetricsManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetricsManager) EXPECT() *MockMetricsManagerMockRecorder {
	return m.recorder
}

// AddKafkaSendDurationMetric mocks base method.
func (m *MockMetricsManager) AddKafkaSendDurationMetric(ctx context.Context, d time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddKafkaSendDurationMetric", ctx, d)
}

// AddKafkaSendDurationMetric indicates an expected call of AddKafkaSendDurationMetric.
func (mr *MockMetricsManagerMockRecorder) AddKafkaSendDurationMetric(ctx, d any) *MockMetricsManagerAddKafkaSendDurationMetricCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddKafkaSendDurationMetric", reflect.TypeOf((*MockMetricsManager)(nil).AddKafkaSendDurationMetric), ctx, d)
	return &MockMetricsManagerAddKafkaSendDurationMetricCall{Call: call}
}

// MockMetricsManagerAddKafkaSendDurationMetricCall wrap *gomock.Call
type MockMetricsManagerAddKafkaSendDurationMetricCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMetricsManagerAddKafkaSendDurationMetricCall) Return() *MockMetricsManagerAddKafkaSendDurationMetricCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMetricsManagerAddKafkaSendDurationMetricCall) Do(f func(context.Context, time.Duration)) *MockMetricsManagerAddKafkaSendDurationMetricCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMetricsManagerAddKafkaSendDurationMetricCall) DoAndReturn(f func(context.Context, time.Duration)) *MockMetricsManagerAddKafkaSendDurationMetricCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AddMeteoClientDurationMetric mocks base method.
func (m *MockMetricsManager) AddMeteoClientDurationMetric(ctx context.Context, d time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddMeteoClientDurationMetric", ctx, d)
}

// AddMeteoClientDurationMetric indicates an expected call of AddMeteoClientDurationMetric.
func (mr *MockMetricsManagerMockRecorder) AddMeteoClientDurationMetric(ctx, d any) *MockMetricsManagerAddMeteoClientDurationMetricCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMeteoClientDurationMetric", reflect.TypeOf((*MockMetricsManager)(nil).AddMeteoClientDurationMetric), ctx, d)
	return &MockMetricsManagerAddMeteoClientDurationMetricCall{Call: call}
}

// MockMetricsManagerAddMeteoClientDurationMetricCall wrap *gomock.Call
type MockMetricsManagerAddMeteoClientDurationMetricCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMetricsManagerAddMeteoClientDurationMetricCall) Return() *MockMetricsManagerAddMeteoClientDurationMetricCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMetricsManagerAddMeteoClientDurationMetricCall) Do(f func(context.Context, time.Duration)) *MockMetricsManagerAddMeteoClientDurationMetricCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMetricsManagerAddMeteoClientDurationMetricCall) DoAndReturn(f func(context.Context, time.Duration)) *MockMetricsManagerAddMeteoClientDurationMetricCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
