// Code generated by MockGen. DO NOT EDIT.
// Source: config.go
//
// Generated by this command:
//
//	mockgen -source config.go -destination config_mocks_test.go -package weather_service_test -typed
//

// Package weather_service_test is a generated GoMock package.
package weather_service_test

import (
	reflect "reflect"
	time "time"

	config "github.com/meteogo/config/pkg/config"
	gomock "go.uber.org/mock/gomock"
)

// MockProvider is a mock of Provider interface.
type MockProvider struct {
	ctrl     *gomock.Controller
	recorder *MockProviderMockRecorder
	isgomock struct{}
}

// MockProviderMockRecorder is the mock recorder for MockProvider.
type MockProviderMockRecorder struct {
	mock *MockProvider
}

// NewMockProvider creates a new mock instance.
func NewMockProvider(ctrl *gomock.Controller) *MockProvider {
	mock := &MockProvider{ctrl: ctrl}
	mock.recorder = &MockProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProvider) EXPECT() *MockProviderMockRecorder {
	return m.recorder
}

// GetConfigClient mocks base method.
func (m *MockProvider) GetConfigClient() config.ConfigClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfigClient")
	ret0, _ := ret[0].(config.ConfigClient)
	return ret0
}

// GetConfigClient indicates an expected call of GetConfigClient.
func (mr *MockProviderMockRecorder) GetConfigClient() *MockProviderGetConfigClientCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfigClient", reflect.TypeOf((*MockProvider)(nil).GetConfigClient))
	return &MockProviderGetConfigClientCall{Call: call}
}

// MockProviderGetConfigClientCall wrap *gomock.Call
type MockProviderGetConfigClientCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProviderGetConfigClientCall) Return(arg0 config.ConfigClient) *MockProviderGetConfigClientCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProviderGetConfigClientCall) Do(f func() config.ConfigClient) *MockProviderGetConfigClientCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProviderGetConfigClientCall) DoAndReturn(f func() config.ConfigClient) *MockProviderGetConfigClientCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetSecretClient mocks base method.
func (m *MockProvider) GetSecretClient() config.SecretClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecretClient")
	ret0, _ := ret[0].(config.SecretClient)
	return ret0
}

// GetSecretClient indicates an expected call of GetSecretClient.
func (mr *MockProviderMockRecorder) GetSecretClient() *MockProviderGetSecretClientCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecretClient", reflect.TypeOf((*MockProvider)(nil).GetSecretClient))
	return &MockProviderGetSecretClientCall{Call: call}
}

// MockProviderGetSecretClientCall wrap *gomock.Call
type MockProviderGetSecretClientCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProviderGetSecretClientCall) Return(arg0 config.SecretClient) *MockProviderGetSecretClientCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProviderGetSecretClientCall) Do(f func() config.SecretClient) *MockProviderGetSecretClientCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProviderGetSecretClientCall) DoAndReturn(f func() config.SecretClient) *MockProviderGetSecretClientCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockConfigClient is a mock of ConfigClient interface.
type MockConfigClient struct {
	ctrl     *gomock.Controller
	recorder *MockConfigClientMockRecorder
	isgomock struct{}
}

// MockConfigClientMockRecorder is the mock recorder for MockConfigClient.
type MockConfigClientMockRecorder struct {
	mock *MockConfigClient
}

// NewMockConfigClient creates a new mock instance.
func NewMockConfigClient(ctrl *gomock.Controller) *MockConfigClient {
	mock := &MockConfigClient{ctrl: ctrl}
	mock.recorder = &MockConfigClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfigClient) EXPECT() *MockConfigClientMockRecorder {
	return m.recorder
}

// GetValue mocks base method.
func (m *MockConfigClient) GetValue(key config.Key) config.Value {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValue", key)
	ret0, _ := ret[0].(config.Value)
	return ret0
}

// GetValue indicates an expected call of GetValue.
func (mr *MockConfigClientMockRecorder) GetValue(key any) *MockConfigClientGetValueCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValue", reflect.TypeOf((*MockConfigClient)(nil).GetValue), key)
	return &MockConfigClientGetValueCall{Call: call}
}

// MockConfigClientGetValueCall wrap *gomock.Call
type MockConfigClientGetValueCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConfigClientGetValueCall) Return(arg0 config.Value) *MockConfigClientGetValueCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConfigClientGetValueCall) Do(f func(config.Key) config.Value) *MockConfigClientGetValueCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConfigClientGetValueCall) DoAndReturn(f func(config.Key) config.Value) *MockConfigClientGetValueCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockValue is a mock of Value interface.
type MockValue struct {
	ctrl     *gomock.Controller
	recorder *MockValueMockRecorder
	isgomock struct{}
}

// MockValueMockRecorder is the mock recorder for MockValue.
type MockValueMockRecorder struct {
	mock *MockValue
}

// NewMockValue creates a new mock instance.
func NewMockValue(ctrl *gomock.Controller) *MockValue {
	mock := &MockValue{ctrl: ctrl}
	mock.recorder = &MockValueMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockValue) EXPECT() *MockValueMockRecorder {
	return m.recorder
}

// Bool mocks base method.
func (m *MockValue) Bool() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Bool")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Bool indicates an expected call of Bool.
func (mr *MockValueMockRecorder) Bool() *MockValueBoolCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bool", reflect.TypeOf((*MockValue)(nil).Bool))
	return &MockValueBoolCall{Call: call}
}

// MockValueBoolCall wrap *gomock.Call
type MockValueBoolCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockValueBoolCall) Return(arg0 bool) *MockValueBoolCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockValueBoolCall) Do(f func() bool) *MockValueBoolCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockValueBoolCall) DoAndReturn(f func() bool) *MockValueBoolCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Duration mocks base method.
func (m *MockValue) Duration() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Duration")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// Duration indicates an expected call of Duration.
func (mr *MockValueMockRecorder) Duration() *MockValueDurationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Duration", reflect.TypeOf((*MockValue)(nil).Duration))
	return &MockValueDurationCall{Call: call}
}

// MockValueDurationCall wrap *gomock.Call
type MockValueDurationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockValueDurationCall) Return(arg0 time.Duration) *MockValueDurationCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockValueDurationCall) Do(f func() time.Duration) *MockValueDurationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockValueDurationCall) DoAndReturn(f func() time.Duration) *MockValueDurationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Int mocks base method.
func (m *MockValue) Int() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Int")
	ret0, _ := ret[0].(int)
	return ret0
}

// Int indicates an expected call of Int.
func (mr *MockValueMockRecorder) Int() *MockValueIntCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Int", reflect.TypeOf((*MockValue)(nil).Int))
	return &MockValueIntCall{Call: call}
}

// MockValueIntCall wrap *gomock.Call
type MockValueIntCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockValueIntCall) Return(arg0 int) *MockValueIntCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockValueIntCall) Do(f func() int) *MockValueIntCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockValueIntCall) DoAndReturn(f func() int) *MockValueIntCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// String mocks base method.
func (m *MockValue) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockValueMockRecorder) String() *MockValueStringCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockValue)(nil).String))
	return &MockValueStringCall{Call: call}
}

// MockValueStringCall wrap *gomock.Call
type MockValueStringCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockValueStringCall) Return(arg0 string) *MockValueStringCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockValueStringCall) Do(f func() string) *MockValueStringCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockValueStringCall) DoAndReturn(f func() string) *MockValueStringCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
